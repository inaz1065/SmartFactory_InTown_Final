<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="Btn_Exit.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        yMIPAAAAAElFTkSuQmCC
</value>
  </data>
</root>